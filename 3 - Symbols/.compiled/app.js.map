{"version":3,"sources":["../src/app.js"],"names":["symbol","Symbol","console","log","anotherSymbol","obj","name","prop","symbol1","for","symbol2","person","makeAge","ageSymbol","symboll","person2","age","makesAge","ageSymboll","Person","prototype","toStringTag","personObj","numbers","toPrimitive"],"mappings":";;;;;;;;AAAA;;;;AAIA,IAAIA,SAASC,OAAO,OAAP,CAAb;;AAEAC,QAAQC,GAAR,CAAYH,MAAZ;AACAE,QAAQC,GAAR,QAAmBH,MAAnB,yCAAmBA,MAAnB;;AAEA,IAAII,gBAAgBH,OAAO,OAAP,CAApB;;AAEA;AACAC,QAAQC,GAAR,CAAYH,UAAUI,aAAtB;;AAEA,IAAIC;AACAC,QAAM;AADN,GAECN,MAFD,EAEU,EAFV,CAAJ;;AAKA;AACAE,QAAQC,GAAR,CAAY,+CAAZ;AACA,KAAK,IAAMI,IAAX,IAAmBF,GAAnB,EAAwB;AACpBH,UAAQC,GAAR,CAAeI,IAAf,UAAwBF,IAAIE,IAAJ,CAAxB;AACH;;AAEDL,QAAQC,GAAR,CAAY,mGAAZ;AACAD,QAAQC,GAAR,CAAYE,GAAZ,EAAiBA,IAAIL,MAAJ,CAAjB;;AAEA;;;;AAICE,QAAQC,GAAR,CAAY,mCAAZ;AACA,IAAIK,UAAUP,OAAOQ,GAAP,CAAW,KAAX,CAAd;AACA,IAAIC,UAAUT,OAAOQ,GAAP,CAAW,KAAX,CAAd;;AAEAP,QAAQC,GAAR,CAAYK,YAAYE,OAAxB;;AAEA,IAAIC,SAAS;AACTL,QAAM;AADG,CAAb;;AAIA,SAASM,OAAT,CAAiBD,MAAjB,EAAyB;AACrB,MAAIE,YAAYZ,OAAOQ,GAAP,CAAW,KAAX,CAAhB;AACAE,SAAOE,SAAP,IAAoB,EAApB;AACH;;AAEDD,QAAQD,MAAR;;AAEAT,QAAQC,GAAR,CAAY,+BAAZ;AACAD,QAAQC,GAAR,CAAYQ,OAAOH,OAAP,CAAZ;AACAN,QAAQC,GAAR,CAAYQ,OAAOX,MAAP,CAAZ,E,CAA6B;AAC7B;AACA;;;AAGD;;;AAGA,IAAIc,UAAUb,OAAOQ,GAAP,CAAW,KAAX,CAAd;;AAEA,IAAIM,UAAU;AACVT,QAAM,QADI;AAEVU,OAAK;AAFK,CAAd;;AAKA,SAASC,QAAT,CAAkBN,MAAlB,EAA0B;AACtB,MAAIO,aAAajB,OAAOQ,GAAP,CAAW,KAAX,CAAjB;AACAE,SAAOO,UAAP,IAAqB,EAArB;AACH;;AAEDD,SAASF,OAAT;;AAEAb,QAAQC,GAAR,CAAY,wDAAZ;AACAD,QAAQC,GAAR,CAAYY,OAAZ;;AAEA;;;;IAIOI,M;;;;AAIPA,OAAOC,SAAP,CAAiBnB,OAAOoB,WAAxB,IAAuC,QAAvC;;AAEA;AACA,IAAIC,YAAY,IAAIH,MAAJ,EAAhB;AACAjB,QAAQC,GAAR,MAAemB,SAAf;;AAEApB,QAAQC,GAAR,CAAY,0DAAZ;AACA,IAAIoB,UAAU,CAAC,CAAD,EAAK,CAAL,EAAQ,CAAR,CAAd;;AAEArB,QAAQC,GAAR,CAAYoB,UAAU,CAAtB;;AAEAA,QAAQtB,OAAOuB,WAAf,IAA8B,YAAM;AAChC,SAAO,GAAP;AACH,CAFD;;AAIAtB,QAAQC,GAAR,CAAYoB,UAAU,CAAtB","file":"app.js","sourcesContent":["/**\r\n * Symbol é usado como identificador unico e imutavel, pode ser usado para identificar propriedades de um objeto.\r\n */\r\n\r\nlet symbol = Symbol('debug');\r\n\r\nconsole.log(symbol);\r\nconsole.log(typeof symbol);\r\n\r\nlet anotherSymbol = Symbol('debug');\r\n\r\n// comparando 2 symbols diferentes... apontam para endereços de memoria diferentes.\r\nconsole.log(symbol == anotherSymbol);\r\n\r\nlet obj = {\r\n    name: 'Fernando',\r\n    [symbol]: 22\r\n}\r\n\r\n// ao iterarmos sobre o objeto podemos verificar que não existe iteração sobre o symbol\r\nconsole.log('\\nIterando sobre as propriedades de um objeto');\r\nfor (const prop in obj) {\r\n    console.log(`${prop}: ${obj[prop]}`);\r\n}\r\n\r\nconsole.log('\\n Durante a iteração o SYMBOL não foi printado... mas ele esta dentro do objeto como podemos ver');\r\nconsole.log(obj, obj[symbol])\r\n\r\n/**\r\n * Use the same symbol more than once, different objcets sharing the same id;\r\n */\r\n\r\n console.log('\\nObjects sharing the same Symbol')\r\n let symbol1 = Symbol.for('age');\r\n let symbol2 = Symbol.for('age');\r\n\r\n console.log(symbol1 === symbol2);\r\n\r\n let person = {\r\n     name: 'Mendes'\r\n }\r\n\r\n function makeAge(person) {\r\n     let ageSymbol = Symbol.for('age');\r\n     person[ageSymbol] = 26;\r\n }\r\n\r\n makeAge(person);\r\n\r\n console.log('\\nPerson sharing symbol age: ')\r\n console.log(person[symbol1]);\r\n console.log(person[symbol]); // That symbol can have the same identifier as the above, but the reference are differentes\r\n // the references between symbol1, syboml2 and ageSymbol are the same by the mode it was referenced\r\n // Symbol.for('age');\r\n\r\n\r\n/**\r\n * Advantages of (unique) IDs / Symbols\r\n */\r\nlet symboll = Symbol.for('age');\r\n\r\nlet person2 = {\r\n    name: 'Thaysa',\r\n    age: 24\r\n}\r\n\r\nfunction makesAge(person) {\r\n    let ageSymboll = Symbol.for('age');\r\n    person[ageSymboll] = 55\r\n}\r\n\r\nmakesAge(person2);\r\n\r\nconsole.log('\\nA propriedade age não irá sobescrever a propriedade ')\r\nconsole.log(person2);\r\n\r\n/**\r\n * Well-Known Symbols (default symbols created by JS)\r\n */\r\n\r\n class Person {\r\n\r\n }\r\n\r\nPerson.prototype[Symbol.toStringTag] = 'Person';\r\n\r\n// comment the code on line 85 to see the difference and the console.log below\r\nlet personObj = new Person();\r\nconsole.log(`${personObj}`);\r\n\r\nconsole.log('Change the comportament when plus something at the array')\r\nlet numbers = [1 , 2, 3];\r\n\r\nconsole.log(numbers + 1);\r\n\r\nnumbers[Symbol.toPrimitive] = () => {\r\n    return 999;\r\n}\r\n\r\nconsole.log(numbers + 1);\r\n\r\n\r\n\r\n"]}